---
- hosts: localhost
  connection: local
  become: true

  tasks:

# ################################
# locale-gen and localectl
# ################################

  - name: 'locale-gen: fr_FR (ISO-8859-1)'
    community.general.locale_gen:
      state: present
      name: fr_FR

  - name: 'locale-gen: fr_FR.UTF-8'
    community.general.locale_gen:
      state: present
      name: fr_FR.UTF-8

  - name: 'locale-gen: en_US (ISO-8859-1)'
    community.general.locale_gen:
      state: present
      name: en_US

  - name: 'locale-gen: en_US.UTF-8'
    community.general.locale_gen:
      state: present
      name: en_US.UTF-8

  - name: 'localectl: configure locale and language'
    ansible.builtin.command: localectl set-locale LANG=en_US.UTF-8 LANGUAGE=en_US

  - name: 'localectl: set-x11-keymap'
    ansible.builtin.command: localectl set-x11-keymap fr

# ################################
# apt-get update && apt-get upgrade
# ################################

  - name: 'apt-get update'
    ansible.builtin.apt:
      force_apt_get: yes
      update_cache: yes

  - name: 'apt-get upgrade'
    ansible.builtin.apt:
      force_apt_get: yes
      upgrade: yes

# ################################
# ubuntu-desktop
# ################################

  - name: 'apt packages: install ubuntu-desktop'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      name: ubuntu-desktop

# ################################
# users
# ################################

  - name: 'users: creating "etienneg"'
    ansible.builtin.user:
      state: present
      name: "{{ item }}"
      shell: /bin/bash
      append: yes
      groups: adm,cdrom,sudo,dip,plugdev,lpadmin,lxd
      password: '$6$bc.dsTpAG4tmqRK6$o8dO2F8vjgOTWvykliZst04Iwp./Dl1MLHxfrFEJ0XVQCnwP2kUFGb.33ADvq5Y0gq0WXYANOQZuer22NXxx90'
      update_password: on_create
    loop:
      - etienneg
    # register: users_forced_to_change_password
    # notify: change password

  - name: 'users: creating "ansible-deploy"'
    ansible.builtin.user:
      state: present
      name: ansible-deploy
      system: yes
      shell: /bin/false

# ################################
# apt packages
# ################################

  - name: 'apt packages: install CLI development tools'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      name:
        - git
        - jq
        - tree
        - shellcheck
        - libsecret-tools
        - python3-pip

  - name: 'apt packages: install GUI development tools'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      name:
        - virtualbox
        - rabbitvcs-nautilus

  - name: 'apt packages: install desktop tools'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      name:
        - blueman

# ################################
# snap packages
# ################################

  - name: 'snap packages: install GUI development tools'
    community.general.snap:
      state: present
      name:
        - notepadqq

  - name: 'snap packages: install vscode with --classic option'
    community.general.snap:
      state: present
      name: code
      classic: true

  - name: 'snap packages: install desktop tools'
    community.general.snap:
      state: present
      name:
        - snap-store
        - brave
        - teams

# ################################
# pip packages
# ################################

  - name: 'pip packages: install CLI development tools'
    ansible.builtin.pip:
      state: present
      name:
        - powerline-shell

# ################################
# apt-get autoclean && apt-get autoremove && apt-get clean
# ################################

  - name: 'apt-get autoclean: remove useless packages from the cache'
    ansible.builtin.apt:
      force_apt_get: yes
      autoclean: yes

  - name: 'apt-get autoremove: remove dependencies that are no longer required'
    ansible.builtin.apt:
      force_apt_get: yes
      autoremove: yes

  # - name: 'apt-get clean'
  #   ansible.builtin.apt:
  #     force_apt_get: yes
  #     clean: yes

# ################################
# system config
# ################################

  - name: 'system config: disabling Wayland and setting Xorg as default display server'
    ansible.builtin.copy:
      src: files/etc/gdm3/custom.conf
      dest: /etc/gdm3/custom.conf
      owner: root
      group: root
      mode: 0644
      backup: yes

  - name: 'system config: restarting gdm3 service'
    ansible.builtin.service:
      state: restarted
      name: gdm3

# ################################
# users config
# ################################

  - name: 'users config: copying ".bashrc" for user "etienneg"'
    ansible.builtin.copy:
      src: files/home/etienneg/.bashrc
      dest: /home/etienneg/.bashrc
      owner: etienneg
      group: etienneg
      mode: 0644

  - name: 'setting resolution'
    # ansible.builtin.command: 'xrandr --output $(xrandr | grep -e " connected [^(]" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/") --mode "1920x1080"'
    ansible.builtin.command: 'xrandr --output $(xrandr | grep -e " connected [^(]" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/") --mode "1360x768"'
    become_user: etienneg

# ################################
# ansible auto-provision
# ################################

  - name: 'users config: adding user "ansible-deploy" to sudoers list'
    ansible.builtin.copy:
      src: files/etc/sudoers.d/ansible-deploy
      dest: /etc/sudoers.d/ansible-deploy
      owner: root
      group: root
      mode: 0440

  - name: 'users config: adding ansible-pull cron job for user "ansible-deploy"'
    ansible.builtin.cron:
      state: present
      name: 'ansible auto-provision'
      user: ansible-deploy
      minute: '*/10'
      job: ansible-pull -o -U https://github.com/etiennegaschet/ansible_ubuntu-desktop-22.04.1-lts.git

# ################################
# system reboot
# ################################

  - name: 'system reboot'
    ansible.builtin.reboot:
      reboot_timeout: 10

# ################################
# handlers
# ################################

  # handlers:
  #   - name: 'handlers: forcing new users to change their password on first login'
  #     shell: chage -d 0 {{ item.name }}
  #     loop: "{{ users_forced_to_change_password.results }}"
  #     when: item.changed
  #     listen: change password
