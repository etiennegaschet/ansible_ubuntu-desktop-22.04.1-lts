---
- name: 'Workstation installation: Ubuntu 22.04.1 LTS'
  hosts: localhost
  connection: local
  become: true

  vars:

    list_system_locales:
      - 'en_US'
      - 'en_US.UTF-8'
      - 'fr_FR'
      - 'fr_FR.UTF-8'

    list_system_users:
      - 'etienneg'

    list_packages_apt_keys:
      # adds docker GPG apt key:
      - 'https://download.docker.com/linux/ubuntu/gpg'

    list_packages_apt_repositories:
      # adds docker repository:
      - 'deb https://download.docker.com/linux/ubuntu focal stable'

    list_packages_apt:
      # installs a desktop environment:
      - 'ubuntu-desktop'
      # installs CLI development tools:
      - 'git'
      - 'jq'
      - 'tree'
      - 'shellcheck'
      - 'libsecret-tools'
      - 'python3-pip'
      # installs GUI development tools:
      - 'virtualbox'
      - 'rabbitvcs-nautilus'
      # installs desktop tools:
      - 'blueman'
      # installs docker-ce and docker-desktop dependencies:
      - 'aptitude'
      - 'apt-transport-https'
      - 'ca-certificates'
      - 'curl'
      - 'software-properties-common'
      - 'python3-pip'
      - 'virtualenv'
      - 'python3-setuptools'
      # installs docker-ce
      - 'docker-ce'

    list_packages_apt_via_url:
      - 'https://desktop.docker.com/linux/main/amd64/docker-desktop-4.12.0-amd64.deb'

    list_packages_snap:
      # installs GUI development tools:
      - 'notepadqq'
      # installs desktop tools:
      - 'snap-store'
      - 'brave'
      - 'teams'

    list_packages_snap_classic_mode:
      # installs GUI development tools:
      - 'code'

    list_packages_pip:
      # installs CLI development tools:
      - 'powerline-shell'

    # file_config_user_monitor: 'monitors.xml.laptop-1920x1080'
    # file_config_user_monitor: 'monitors.xml.vagrant-1360x768'
    file_config_user_monitor: 'monitors.xml.vagrant-1280x960'

  tasks:

    # ################################
    # locale-gen and localectl
    # ################################

  - name: 'locale-gen'
    community.general.locale_gen:
      state: present
      name: "{{ item }}"
    loop: "{{ list_system_locales }}"

  - name: 'localectl: configure locale and language'
    ansible.builtin.command: localectl set-locale LANG=en_US.UTF-8 LANGUAGE=en_US

  - name: 'localectl: set-x11-keymap'
    ansible.builtin.command: localectl set-x11-keymap fr

    # ################################
    # apt-get update && apt-get upgrade
    # ################################

  - name: 'apt-get update'
    ansible.builtin.apt:
      force_apt_get: yes
      update_cache: yes

  - name: 'apt-get upgrade'
    ansible.builtin.apt:
      force_apt_get: yes
      upgrade: yes

    # ################################
    # apt packages
    # ################################

  - name: 'add GPG apt keys'
    apt_key:
      state: present
      url: "{{ item }}"
    loop: "{{ list_packages_apt_keys }}"

  - name: 'apt packages: add repositories'
    apt_repository:
      state: present
      repo: "{{ item }}"
    loop: "{{ list_packages_apt_repositories }}"

  - name: 'apt packages: install via repo'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      update_cache: yes
      name: "{{ item }}"
    loop: "{{ list_packages_apt }}"

  - name: 'apt packages: install via .deb file URL'
    ansible.builtin.apt:
      state: present
      force_apt_get: yes
      update_cache: yes
      deb: "{{ item }}"
    loop: "{{ list_packages_apt_via_url }}"

    # ################################
    # snap packages
    # ################################

  - name: 'snap packages: install'
    community.general.snap:
      state: present
      name: "{{ item }}"
    loop: "{{ list_packages_snap }}"

  - name: 'snap packages: install with --classic option'
    community.general.snap:
      state: present
      classic: true
      name: "{{ item }}"
    loop: "{{ list_packages_snap_classic_mode }}"

    # ################################
    # pip packages
    # ################################

  - name: 'pip packages: install'
    ansible.builtin.pip:
      state: present
      name: "{{ item }}"
    loop: "{{ list_packages_pip }}"

    # ################################
    # apt-get autoclean && apt-get autoremove && apt-get clean
    # ################################

  - name: 'apt-get autoclean: remove useless packages from the cache'
    ansible.builtin.apt:
      force_apt_get: yes
      autoclean: yes

  - name: 'apt-get autoremove: remove dependencies that are no longer required'
    ansible.builtin.apt:
      force_apt_get: yes
      autoremove: yes

  # - name: 'apt-get clean'
  #   ansible.builtin.apt:
  #     force_apt_get: yes
  #     clean: yes

    # ################################
    # users
    # ################################

  - name: 'users: creating users'
    ansible.builtin.user:
      state: present
      name: "{{ item }}"
      shell: /bin/bash
      home: "/home/{{ item }}"
      append: yes
      groups: adm,cdrom,sudo,dip,plugdev,lpadmin,lxd
      password: '$6$bc.dsTpAG4tmqRK6$o8dO2F8vjgOTWvykliZst04Iwp./Dl1MLHxfrFEJ0XVQCnwP2kUFGb.33ADvq5Y0gq0WXYANOQZuer22NXxx90'
      update_password: on_create
    loop: "{{ list_system_users }}"
    # register: users_forced_to_change_password
    # notify: change password

  - name: 'users: creating "ansible-deploy"'
    ansible.builtin.user:
      state: present
      name: ansible-deploy
      system: yes
      shell: /bin/false

    # ################################
    # system config
    # ################################

  - name: 'system config: disabling Wayland and setting Xorg as default display server'
    ansible.builtin.copy:
      src: files/etc/gdm3/custom.conf
      dest: /etc/gdm3/custom.conf
      owner: root
      group: root
      mode: '0644'
      backup: yes

  - name: 'system config: restarting gdm3 service'
    ansible.builtin.service:
      state: restarted
      name: gdm3

    # ################################
    # users config
    # ################################

  - name: 'users config: copying "~/.bash_logout"'
    ansible.builtin.copy:
      src: "files/home/user/.bash_logout"
      dest: "/home/{{ item }}/.bash_logout"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

  - name: 'users config: copying "~/.bash_aliases"'
    ansible.builtin.copy:
      src: "files/home/user/.bash_aliases"
      dest: "/home/{{ item }}/.bash_aliases"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

  - name: 'users config: copying "~/.bashrc"'
    ansible.builtin.copy:
      src: "files/home/user/.bashrc"
      dest: "/home/{{ item }}/.bashrc"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

  - name: 'users config: copying "~/.profile"'
    ansible.builtin.copy:
      src: "files/home/user/.profile"
      dest: "/home/{{ item }}/.profile"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

  - name: 'users config: creating "~/.fonts" directory'
    ansible.builtin.file:
      state: directory
      path: "/home/{{ item }}/.fonts"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0755'
    loop: "{{ list_system_users }}"

  - name: 'users config: unzipping "CodeNewRoman" font archive'
    ansible.builtin.unarchive:
      src: "fonts/CodeNewRoman.zip"
      dest: "/home/{{ item }}/.fonts"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

  - name: 'users config: updating the font cache'
    ansible.builtin.command: fc-cache -fv

  - name: 'users config: creating "~/.config" directory'
    ansible.builtin.file:
      state: directory
      path: "/home/{{ item }}/.config"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0700'
    loop: "{{ list_system_users }}"

  - name: 'users config: copying "~/.config/monitors.xml" (setting screen resolution)'
    ansible.builtin.copy:
      src: "files/home/user/.config/{{ file_config_user_monitor }}"
      dest: "/home/{{ item }}/.config/monitors.xml"
      owner: "{{ item }}"
      group: "{{ item }}"
      mode: '0644'
    loop: "{{ list_system_users }}"

    # ################################
    # ansible auto-provision
    # ################################

  - name: 'ansible auto-provision: adding user "ansible-deploy" to sudoers list'
    ansible.builtin.copy:
      src: files/etc/sudoers.d/ansible-deploy
      dest: /etc/sudoers.d/ansible-deploy
      owner: root
      group: root
      mode: '0640'

  - name: 'ansible auto-provision: adding ansible-pull cron job for user "ansible-deploy"'
    ansible.builtin.cron:
      state: present
      name: 'ansible auto-provision'
      user: ansible-deploy
      minute: '*/10'
      job: ansible-pull -o -U https://github.com/etiennegaschet/ansible_ubuntu-desktop-22.04.1-lts.git

    # ################################
    # system reboot
    # ################################

  # - name: 'system reboot'
  #   ansible.builtin.reboot:
  #     reboot_timeout: 600

    # ################################
    # handlers
    # ################################

  # handlers:
  #   - name: 'handlers: forcing new users to change their password on first login'
  #     shell: chage -d 0 {{ item.name }}
  #     loop: "{{ users_forced_to_change_password.results }}"
  #     when: item.changed
  #     listen: change password
